################################################Difference between Scala and Java?################################################

1.Scala is minimized version of Java.
2.Scala is type-safe JVM language that incorporates both object-oriented and functional programming where
3.Scala “variables” are immutable by default whereas Java variables are mutable by default.
4.In Java the case statement provides for some limited conditional branching.
  In Scala, it is possible to construct some very sophisticated pattern matching logic using the case / match construct which doesn't just bring new possibilities but a new type of thinking to realize new possibilities.
5.Scala is Statically typed where as Java Dynamically typed.
6.Scala has several options not available in Java,such as type inference,a powerful type system,pattern matching,traits and proper higher order functions
7.Lazy Evaluation in Scala,it delays complex computations until it absolute necessary.

###########################################  HigherOrder functions:  ###################################################################
  --> In Scala,HigherOrder functions take other functions as parameters or return a function as result,this is possible because functions are first class values in scala.
 Reason to use higherOrder function is to reduce redundant code.


################################## what is case classes? #####################################################################
  --> Case classes are special type of classes,as the compiler automatically adds some usefull methods to them
  --> Case classes are Scala’s way to allow pattern matching on objects without requiring a large amount of boilerplate code
  --> Case class naturally support  for pattern matching


    # case class Person(name:String,age:Int)

 1.first one it generates is a factory method: it allows to create instances of the case class without the need of using the 'new' keyword.

     # Person("SOUMITH",26)

 2. all the parameters are converted in immutable values that can be easily accessed without any side effects.
       # val x = Person("SOUMITH",26)
       #x.name ==> SOUMITH
       #x.age ====> 26
       Scala compiler adds intutive implementations of toString,hashCode,Equals
      val y = ("SOUMITH",26)
      val z = ("SAI",26)
      scala> x equals y  ==> True
            x equals z  ==> False
##################################################### Pattern matching ###################################################################

pattern matching is a mechanism for checking a value against a pattern.it is powerful version of switch statment in java.
a pattern match includes sequence of alternatives,each start with  keyword case.
each alternatives includes patterns and one or more expressions,which wil be evaluated if the pattren matches.
'=>' separates pattern from the expressions.
a 'match' expression is evaluted by trying each of the pattern in the order they are written.

types of patterns :---> wild Pattern (case _)
                   --->Constant Pattern ( case 5 => "five")
                   ---> Variable Pattern (case something => "something")
                   constant or variable ?
                    scala treats a name with lower case a variable or upper case as a  Constant

        import math.{E,Pi}
        E match {
          case Pi => "strane it is pi"+PI
          case _  => "other value"
        }
        #################
        val pi = scala.math.Pi
        E match{
          case pi=> "xyxabcd"
        }
                  --> constructer patterns:
                  expr match {
                      case BinOp("+", e, Number(0)) => println("a deep match")
                      case _ =>
                    }
                 --> Sequence patterns:
                 expr match {
                   case List(0, _, _) => println("found it")
                   case _ =>
                 }
                 If you want to match against a sequence without specifying how long it can be, you can specify _* as the last element of the pattern.
               ---> Tuple Patterns:

               def tupleDemo(expr: Any) =
                  expr match {
                      case (a, b, c)=>println("matched "+ a + b + c)
                      case _ =>
                    }

Traits --> traits are similar to interfaces in java,classes and objects can extends traits it cannot be initiated.
          A trait encapusulates methods and field definations which can be reused by mixing them into classes.
Single Ton Objects : An object is a class that has exactly one instance. It is created lazily when it is referenced, like a lazy val.

Companion Objects :An object with the same name as a class is called a companion object. Conversely, the class is the object’s companion class. A companion class or object can access the private members of its companion

option :  OPtion is container that can give you two values,an instance of Some ,or it can give you instance of None.
          Scala try's to solve null pointer exceptions using Option.
          Option is a like abstract class must be implmement Some and None


Difference between Traits and abstract class?

* a abstract class can have constructer parameters where as in traits it does'nt have any constructer parameters.
* a class can extends only one abstract class at a time,where as class can extends multiple traits using 'with' keyword.
